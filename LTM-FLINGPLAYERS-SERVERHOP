wait(7.5)

print('v1.8')


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
Players.LocalPlayer.OnTeleport:Connect(function()
    queueteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/RSC-HUB/RobloxScriptsHub/refs/heads/main/LTM-FLINGPLAYERS-SERVERHOP'))()")
end)
local angle = 1
local radius = 1
local blackHoleActive = false
function serverHop()
if httprequest then
    local response = httprequest({Url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true"})
    local data = HttpService:JSONDecode(response.Body).data

    if data then
        for _, server in ipairs(data) do
            if type(server) == "table" and tonumber(server.playing) and tonumber(server.maxPlayers) and server.playing < server.maxPlayers and server.id ~= JobId then
                return TeleportService:TeleportToPlaceInstance(PlaceId, server.id, Players.LocalPlayer)
            end
        end
        notify("Serverhop", "Couldn't find a server.")
    end
else
    notify("Incompatible Exploit", "Your exploit does not support this command (missing request)")
end
end

local function setupPlayer()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    local Folder = Instance.new("Folder", Workspace)
    local Part = Instance.new("Part", Folder)
    local Attachment1 = Instance.new("Attachment", Part)
    Part.Anchored = true
    Part.CanCollide = false
    Part.Transparency = 0

    return humanoidRootPart, Attachment1
end

local humanoidRootPart, Attachment1 = setupPlayer()

if not getgenv().Network then
    getgenv().Network = {
        BaseParts = {},
        Velocity = Vector3.new(16.46262424, 16.46262424, 16.46262424)
    }

    Network.RetainPart = function(part)
        if typeof(part) == "Instance" and part:IsA("BasePart") and part:IsDescendantOf(Workspace) then
            table.insert(Network.BaseParts, part)
            part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
            part.CanCollide = false
        end
    end

    local function EnablePartControl()
        LocalPlayer.ReplicationFocus = Workspace
        RunService.Heartbeat:Connect(function()
            sethiddenproperty(LocalPlayer, "SimulationRadius", math.huge)
            for _, part in pairs(Network.BaseParts) do
                if part:IsDescendantOf(Workspace) then
                    part.Velocity = Network.Velocity
                end
            end
        end)
    end

    EnablePartControl()
end

local function ForcePart(v)
    if v:IsA("Part") and not v.Anchored and not v.Parent:FindFirstChild("Humanoid") and not v.Parent:FindFirstChild("Head") and v.Name ~= "Handle" then
        for _, x in next, v:GetChildren() do
            if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or x:IsA("BodyPosition") or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or x:IsA("RocketPropulsion") then
                x:Destroy()
            end
        end
        if v:FindFirstChild("Attachment") then
            v:FindFirstChild("Attachment"):Destroy()
        end
        if v:FindFirstChild("AlignPosition") then
            v:FindFirstChild("AlignPosition"):Destroy()
        end
        if v:FindFirstChild("Torque") then
            v:FindFirstChild("Torque"):Destroy()
        end
        v.CanCollide = false

        local Torque = Instance.new("Torque", v)
        Torque.Torque = Vector3.new(1e20, 1e20, 1e20)
        local AlignPosition = Instance.new("AlignPosition", v)
        local Attachment2 = Instance.new("Attachment", v)
        Torque.Attachment0 = Attachment2
        AlignPosition.MaxForce = math.huge
        AlignPosition.MaxVelocity = math.huge 
        AlignPosition.Responsiveness = 1e20
        AlignPosition.Attachment0 = Attachment2
        AlignPosition.Attachment1 = Attachment1
    end
end

local function toggleBlackHole()
    blackHoleActive = not blackHoleActive
    if blackHoleActive then
        for _, v in next, Workspace:GetDescendants() do
            ForcePart(v)
        end

        Workspace.DescendantAdded:Connect(function(v)
            if blackHoleActive then
                ForcePart(v)
            end
        end)

        spawn(function()
            while blackHoleActive do
                -- Get all players except the local player
                local players = Players:GetPlayers()
                local otherPlayers = {}

                for _, player in pairs(players) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        table.insert(otherPlayers, player.Character.HumanoidRootPart)
                    end
                end

                if #otherPlayers > 0 then
                    local randomHRP = otherPlayers[math.random(1, #otherPlayers)]
                    Attachment1.WorldCFrame = randomHRP.CFrame  -- Set to the CFrame of the chosen HumanoidRootPart
                end

                wait(0.75)
            end
        end)
    else
        Attachment1.WorldCFrame = CFrame.new(0, -1000, 0)
    end
end

LocalPlayer.CharacterAdded:Connect(function()
    humanoidRootPart, Attachment1 = setupPlayer()
    if blackHoleActive then
        toggleBlackHole()
    end
end)

toggleBlackHole()




local playerCount = 0
local playerCheckTime = 0
local serverHopTime = 35

local function checkPlayers()
    local players = game.Players:GetPlayers()
    local localPlayer = game.Players.LocalPlayer
    playerCount = #players

    if playerCount == 1 and players[1] == localPlayer then
        serverHop()
    elseif playerCount == 2 then
        playerCheckTime = playerCheckTime + 0.1
        if playerCheckTime >= serverHopTime then
            serverHop()
        end
    else
        playerCheckTime = 0 -- Reset timer if player count changes
    end
end

game.Players.PlayerRemoving:Connect(function()
    wait(0.1)
    checkPlayers()
end)

while true do
    wait(0.1)
    checkPlayers()
end





while true do
    wait(0.01)
    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(302, -23, 41))
end
